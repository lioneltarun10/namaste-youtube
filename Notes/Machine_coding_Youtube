W will build youtube app and learn how to write code in machine coding rounds.

First we need to know the requirement clarification.

1) We need to discuss with the interviewer what features to develop.

2) Discuss the tech stack
- Tell the interviewer whether we use tailwind or not
- whether use redux or not for data management
- whether use javascript or typescript
- react-router-dom for routing
- what bundler we are using
- React testing library for testing

And with every tech stack give proper justification why we wan to use that tech stack.
This gives impression that we know what we talk , that we speak like a senior developer , think like a senior developer.

We spend 5 mins on this.

(Interviewers allow google search most of the time , but practice such that we don't need to search anything.)

3) Now create a plan , don't start coding immediately. Do low level design. 
Design the web page in front of interviewer , so the interviewer will be on same page of our design. 

Go deep into planning, discuss what will be in header, what will be in sidebar component , what will be in body component , what buttons will be in body component , what will be inside video container component , what will be inside videocard component , then on click of video card , what page it will go to , the URL of new page , the desgin of new page like header is also present ,watch video  component , video suggestion component , comment section component , etc.


Now start coding.
We will discuss with interviewer , that we can create the app from zero , installing bundler ,setting up the environment , but since we don;t have sufficient time , we can use create-react-app


First install create-react-app package

npm i -g create-react-app

create-react-app is a javascript library which we execute like "npx create-react-app namaste-youtube"


First setup the taiwind.
npm i -D tailwindcss

we don't need postcss package here , becaise create-react-app has taken care of that.

now create a config file using - 
npx tailwindcss init

Now in config file , in content array , we give what files to apply the taiwind css.

module.exports = {
  content: ["./src/**/*.js"],
  theme: {
    extend: {},
  },
  plugins: [],
}

In app.css file , make changes as below - 

@tailwind base;
@tailwind components;
@tailwind utilities;

Developing header
Till today we have used flex , for this time lets use grid.

We have spent time on css here,
But in machine coding interview we should not spend our time on CSS.
But we should spend time on functionality like if we click on hamburger menu , our sidebar should collapse.

We collapse the sidebar based on state cariable but where do we make this state?

We make it in a global space because we have to use that state in both sidebar component and header component for hamburger menu.

So best thing is to use Redux which is a state management library.

npm i @reduxjs/toolkit
npm i react-redux

Next we create a store in utils folder.

Create a store , create a slice as appSlice.
Provide the store using a provider in app.js.

Now in interview we need to check if store is properly setup or not.

We can check through useSelector or the redux extension in chrome , where our state variables are shown

Then next we need to dispatch the action from header component, when we click on hamburger menu.

Now on clicking the hamburger , we see in redux extension that state of isMenuOpen has changed to false.

Next , we need to subscribe our sidebar component to the appSlice of store , using useSelector.

we need to subscribe to a specific part of the store.

Then we put a condition like below - 

 // Early return pattern
  if(!isMenuOpen) return null;


This type of code is known as Early return Pattern , where we check for a condition and return something if the conditin is met , else return the component code.

Or else we can also use ternary operator for isMenuOpen

Hence our functionality of toggling our sidebar menu is working.

Interviewer will be impressed when we wrote our code in redux rather than satte variables because we are thinking in terms of large scale applications.

We need to practice this many times , then only we can write the whole code fastly in front of interviewer.

Now let's build our buttonList.

buttonlist is a collection of button components. let's create a button component.Use that button component many times in buttonlist component to show all the buttons.

Now , it comes to videoContainer component.

We have to ask Interviewer whether he wants us to take data from hard-coded data or from an API.

Let's use youtube's live API for now.
Youtube gives free API to use unlike swiggy. search "youtube video api" in google. And we will also not get CORS error this time because youtube is only providing us with the API directly.

https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&regionCode=US&key=[YOUR_API_KEY]

Where should I keep the API ? In constants file in utils.

But this URL demands our API key , so we need to get our own API key.
Search youtube api key auth in google. follow the steps to create credentials for API key.

We got our API key and we have created the URL- 

const GOOGLE_API_KEY = 'AIzaSyB-VjPRN5OVWqWDxjkx832Lm-X4_dY-G1I'

export const YOUTUBE_VIDEOS_API = 
"https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&regionCode=US&key=" +
GOOGLE_API_KEY

Now where will we make our API call? In videoContainer component using useEffect.

we get below error , when we log the data from api , so go to below link and enable the youtube data API V3.

"YouTube Data API v3 has not been used in project 718923284073 before or it is disabled. Enable it by visiting https://console.developers.google.com/apis/api/youtube.googleapis.com/overview?project=718923284073 then retry. If you enabled this API recently, wait a few minutes for the action to propagate to our systems and retry."


we got the API data successfully from youtube , we can verify by log to console.

store the data in state variable.
Now create VideoCard component for seperate videos and render that cards in VideoContainer component.

We pass props to videocard.
Remember!!! Always make it work for one , then scale it. Pass data for one video(by giving index [0] for the videos state variable) and check once if everthing is coming in videocard properly , then only apply map function on videos state and scale it to different cards.

This way we can avoid a lot of error. Don't start directly by applying map to the videos list.

We got our videocards coming properly in videocontainer, but we got onlt 5 videos.
If we see in youtube api page ,we can give maxresults parameter in api url with values from 1 to 50 , in that way we can load more videos. So lets change url by adding "&maxResults=50"

https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50&regionCode=US&key=" + GOOGLE_API_KEY

we got 50 videos!!.

We can changes region of videos by givin 'IN' instead of 'US'
https://youtube.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=50&regionCode=IN&key=" + GOOGLE_API_KEY

We got popular trending indian videos now.

Now let's build the watchpage , on click on any video we should navigate to watchpage component.

But first lets install react-router-dom and let's create our routing.

npm i react-router-dom

Now create a appRouter for our app using createBrowerRouter , and givi routing paths.

Logic: We can see in real youtube page that , body remains same in all page's , when we click a video , sidebar collapses and MainContainer is replaced by watchPage component. 

so let's keep watchPage component in body but we have to dynamically load component based on the url , if it is '/' , MainContainer should render , if we click on video , then MainContainer should not render but watchPage should render.

For purposes like this , we have <Outlet /> component given by react-router-dom.

const Body = () => {
  return (
    <div className='flex'>
 
      <Sidebar />
      <Outlet />
    </div>
  )
}

const appRouter = createBrowserRouter([
  {
    path: '/',
    element: <Body />,
    children:[
         {
        path:'/',
        element:<MainContainer />
      },
      {
        path:'watch',
        element:<WatchPage />
      }
    ]
  }
])

function App() {
  return (
    <Provider store={store}>
   <div>
      
      <Head />
      <RouterProvider router={appRouter} />
 
      
     

How will be configure what will render in outlet component?
Where will the children of body go in appRouter?It will go wherever our outlet component is present.

Now our eatchpage is loading when we give /watch URL.

Lets's make our videoCard clicked such that it goes to watch page.Let's build our URL exactly like youtube on clicking of video.

<Link to={"/watch?v=" + video.id}> <VideoCard key={video.id} info={video}/></Link>

Now when we go to watchpage , our sidebar should collapse , as original youtube watchpage, where will we do that? We do it in our watchpage using useEffect exactly once when we visit this component.

Let's create another action in appSlice called closeMenu , so that it always closes the sidebar.
We will not dispatch toggleMenu action in this case , because we don't want to open the sideBar , that's why we created a new action to always close the sidebar.


Now let's read the ID that we have passed in watchpage URL.

const params = useParams()
console.log(params);  

when we log our params , we get empty object , because these are search params , not the params sepearted by '/'.

Instead of useParams , we have a useSearchParams hook which we can use.

const [searchParams] = useSearchParams()
console.log(searchParams); 

Now when we consoled the searchParams , we got URLSearchParams which is a feature of Browser.
We can get the videoID using searchParams.get("v") , because videoID is given for "v=" in the URL.

console.log(searchParams.get("v")); 

Now le us embed one video using IFrame.

<iframe width="560" height="315" src="https://www.youtube.com/embed/M03CXh1A2HE?si=CI9u0lJ7tfUM0vNA" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowFullScreen></iframe>


Now this is for one video , let's make it dynamic by giving our videoID in src.

<div className='px-5'>
      <iframe 
      width="800" 
      height="400" 
      src={"https://www.youtube.com/embed/" + searchParams.get("v")}
      title="YouTube video player" 



